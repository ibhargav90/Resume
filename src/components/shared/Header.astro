---
const navItems = [
  {
    title: 'About',
    href: '#about',
    icon: `<path stroke-linecap="round" stroke-linejoin="round" d="M15.75 6a3.75 3.75 0 1 1-7.5 0 3.75 3.75 0 0 1 7.5 0ZM4.501 20.118a7.5 7.5 0 0 1 14.998 0A17.933 17.933 0 0 1 12 21.75c-2.676 0-5.216-.584-7.499-1.632Z" />`,
  },
  {
    title: 'Experience',
    href: '#experience',
    icon: `<path stroke-linecap="round" stroke-linejoin="round" d="M20.25 14.15v4.25c0 1.094-.787 2.036-1.872 2.18-2.087.277-4.216.42-6.378.42s-4.291-.143-6.378-.42c-1.085-.144-1.872-1.086-1.872-2.18v-4.25m16.5 0a2.18 2.18 0 0 0 .75-1.661V8.706c0-1.081-.768-2.015-1.837-2.175a48.114 48.114 0 0 0-3.413-.387m4.5 8.006c-.194.165-.42.295-.673.38A23.978 23.978 0 0 1 12 15.75c-2.648 0-5.195-.429-7.577-1.22a2.016 2.016 0 0 1-.673-.38m0 0A2.18 2.18 0 0 1 3 12.489V8.706c0-1.081.768-2.015 1.837-2.175a48.111 48.111 0 0 1 3.413-.387m7.5 0V5.25A2.25 2.25 0 0 0 13.5 3h-3a2.25 2.25 0 0 0-2.25 2.25v.894m7.5 0a48.667 48.667 0 0 0-7.5 0M12 12.75h.008v.008H12v-.008Z" />`,
  },
  {
    title: 'Projects',
    href: '#projects',
    icon: `<path stroke-linecap="round" stroke-linejoin="round" d="M17.25 6.75 22.5 12l-5.25 5.25m-10.5 0L1.5 12l5.25-5.25m7.5-3-4.5 16.5" />`,
  },
  {
    title: 'Contact',
    href: '#contact',
    icon: `<path stroke-linecap="round" stroke-linejoin="round" d="M21.75 6.75v10.5a2.25 2.25 0 0 1-2.25 2.25h-15a2.25 2.25 0 0 1-2.25-2.25V6.75m19.5 0A2.25 2.25 0 0 0 19.5 4.5h-15a2.25 2.25 0 0 0-2.25 2.25m19.5 0v.243a2.25 2.25 0 0 1-1.07 1.916l-7.5 4.615a2.25 2.25 0 0 1-2.36 0L3.32 8.91a2.25 2.25 0 0 1-1.07-1.916V6.75" />`,
  },
];

const homeIcon = `<path stroke-linecap="round" stroke-linejoin="round" d="m2.25 12 8.954-8.955c.44-.439 1.152-.439 1.591 0L21.75 12M4.5 9.75v10.125c0 .621.504 1.125 1.125 1.125H9.75v-4.875c0-.621.504-1.125 1.125-1.125h2.25c.621 0 1.125.504 1.125 1.125V21h4.125c.621 0 1.125-.504 1.125-1.125V9.75M8.25 21h8.25" />`;
---

<header
  class="fixed top-0 left-0 right-0 z-50 bg-white/80 backdrop-blur-md dark:bg-dark-background/80"
>
  <div class="container mx-auto px-4">
    <div class="flex items-center justify-between h-16">
      <!-- Website Title with Dynamic Icon -->
      <div class="flex items-center space-x-2 text-xl font-bold text-primary dark:text-dark-text">
        <svg
          xmlns="http://www.w3.org/2000/svg"
          fill="none"
          viewBox="0 0 24 24"
          stroke-width="2"
          stroke="currentColor"
          class="w-6 h-6"
          id="headerIcon"
          set:html={homeIcon}
        />
        <span class="text-gray-300 dark:text-gray-600">/</span>
        <span id="headerText">Home</span>
      </div>

      <!-- Navigation and Theme Toggle -->
      <nav class="flex items-center space-x-8">
        <!-- Navigation Links -->
        <div class="hidden md:flex items-center space-x-8">
          {
            navItems.map(({ title, href }) => (
              <a
                href={href}
                class="text-gray-600 hover:text-primary dark:text-gray-300 dark:hover:text-white transition-colors"
                data-section={title}
              >
                {title}
              </a>
            ))
          }
        </div>

        <!-- Theme Toggle Button -->
        <button
          id="themeToggle"
          type="button"
          class="p-2 rounded-full hover:bg-gray-100 dark:hover:bg-gray-800 transition-colors"
          aria-label="Toggle theme"
        >
          <svg
            width="20"
            height="20"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            class="text-gray-600 dark:text-gray-300"
          >
            <path
              class="sun"
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z"
            ></path>
            <path
              class="moon"
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z"
            ></path>
          </svg>
        </button>
      </nav>
    </div>
  </div>
</header>

<style>
  .sun {
    display: block;
  }
  .moon {
    display: none;
  }
  :global(.dark) .sun {
    display: none;
  }
  :global(.dark) .moon {
    display: block;
  }

  #headerText {
    transition: opacity 0.3s ease;
  }
</style>

<script define:vars={{ navItems, homeIcon }}>
  document.addEventListener('DOMContentLoaded', () => {
    const headerText = document.getElementById('headerText');
    const headerIcon = document.getElementById('headerIcon');
    const navLinks = document.querySelectorAll('a[data-section]');
    const sections = document.querySelectorAll('section[id]');

    // Function to update header content
    function updateHeader() {
      // Check if we're at the top of the page
      if (window.scrollY < 100) {
        headerText.style.opacity = '0';
        setTimeout(() => {
          headerText.textContent = 'Home';
          headerIcon.innerHTML = homeIcon;
          headerText.style.opacity = '1';
        }, 150);
        return;
      }

      // Find the current section in view
      let currentSection = '';
      sections.forEach(section => {
        const sectionTop = section.offsetTop - 100;
        const sectionHeight = section.offsetHeight;
        if (window.scrollY >= sectionTop && window.scrollY < sectionTop + sectionHeight) {
          currentSection = section.id;
        }
      });

      // Update header text and icon based on current section
      if (currentSection) {
        const navItem = navItems.find(item => item.href === `#${currentSection}`);
        if (navItem) {
          headerText.style.opacity = '0';
          setTimeout(() => {
            headerText.textContent = navItem.title;
            headerIcon.innerHTML = navItem.icon;
            headerText.style.opacity = '1';
          }, 150);
        }
      } else {
        headerText.style.opacity = '0';
        setTimeout(() => {
          headerText.textContent = 'Home';
          headerIcon.innerHTML = homeIcon;
          headerText.style.opacity = '1';
        }, 150);
      }
    }

    // Update on scroll with debounce
    let scrollTimeout;
    window.addEventListener('scroll', () => {
      if (scrollTimeout) {
        window.cancelAnimationFrame(scrollTimeout);
      }
      scrollTimeout = window.requestAnimationFrame(updateHeader);
    });

    // Initial update
    updateHeader();
  });
</script>
